name: Build and Publish VSIX - Manage-AutomationAccount - azure pipeline task
on:
  push:
    branches:
      - master
    paths:
      - 'Tasks/**/task.json'
jobs:
  build:
    runs-on: windows-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '2.x'

    - name: Install Node.js
      run: |
        choco install nodejs -y -Force

    - name: Install tfx-cli
      run: |
        npm install -g tfx-cli
        npm install -g uuid@latest

    - name: Install VstsTaskSdk
      run: |
        # install vstsTaskSdk for manage-automationAccount task
        # Navigate to the task directory
        Write-Host "Do process for Manage-AutomationAccount task."
        Write-Host "Navigate to Manage-AutomationAccount directory."
        cd Tests
        cd Manage-AutomationAccount

        # Create ps_modules directory if it doesn't exist
        mkdir -p ps_modules

        # Install VstsTaskSdk
        Write-Host "Manage-AutomationAccount VstsTaskSdk installing..."
        Save-Module –Name VstsTaskSdk –Path .\ps_modules -Force
        Write-Host "Installing finished."

        cd ps_modules
        cd VstsTaskSdk
        Write-Host "Manage-AutomationAccount directory contains:"
        ls

        $sourcePath = Get-Location
        # find a directory with vstsTaskSdk version
        $directoryWithFiles = Get-ChildItem -Path $sourcePath -Directory | Where-Object { (Get-ChildItem $_.FullName -File).Count -gt 0 } | Select-Object -First 1

        # If directory cointain file, do process
        if ($directoryWithFiles) {
            # copy files to root folder
            Copy-Item -Path "$($directoryWithFiles.FullName)\*" -Destination $sourcePath -Recurse -Force

            Write-Host "Files from subfolder was copied to root folder ($sourcePath)."

            # delete subfolder
            Remove-Item -Path $directoryWithFiles.FullName -Recurse -Force

            Write-Host "Subfolder was deleted."

            # get list of files
            Write-Host "Moved files to: ($sourcePath) after process:"
            Get-ChildItem -Path $sourcePath
        } else {
            Write-Host "There is no directory with files."
            }



        # install vstsTaskSdk for manage-automationAccount task
        # Navigate to the task directory
        Write-Host "Do process for Manage-AutomationWebHook task."
        Write-Host "Navigate to Manage-AutomationWebHook directory."
        cd ..
        cd ..
        cd ..
        cd Manage-AutomationWebHook

        # Create ps_modules directory if it doesn't exist
        mkdir -p ps_modules

        # Install VstsTaskSdk
        Write-Host "Manage-AutomationWebHook VstsTaskSdk installing..."
        Save-Module –Name VstsTaskSdk –Path .\ps_modules -Force
        Write-Host "Installing finished."

        cd ps_modules
        cd VstsTaskSdk
        Write-Host "Manage-AutomationWebHook directory contains:"
        ls

        $sourcePath = Get-Location
        # find a directory with vstsTaskSdk version
        $directoryWithFiles = Get-ChildItem -Path $sourcePath -Directory | Where-Object { (Get-ChildItem $_.FullName -File).Count -gt 0 } | Select-Object -First 1

        # If directory cointain file, do process
        if ($directoryWithFiles) {
            # copy files to root folder
            Copy-Item -Path "$($directoryWithFiles.FullName)\*" -Destination $sourcePath -Recurse -Force

            Write-Host "Files from subfolder was copied to root folder ($sourcePath)."

            # delete subfolder
            Remove-Item -Path $directoryWithFiles.FullName -Recurse -Force

            Write-Host "Subfolder was deleted."

            # get list of files
            Write-Host "Moved files to: ($sourcePath) after process:"
            Get-ChildItem -Path $sourcePath
        } else {
            Write-Host "There is no directory with files."
            }

    - name: Generate and Upload VSIX file
      env:
        NODE_AUTH_TOKEN: ${{ secrets.PAT_ROMAN_MANAGE_AUTOMATION_ACCOUNT }}
      run: |
        Write-Host "Start generate and upload VSIX file..."
        tfx extension publish --publisher GreyCorbelSolutions --manifest-globs vss-extension.json --token $env:NODE_AUTH_TOKEN
